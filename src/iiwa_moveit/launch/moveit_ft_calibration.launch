<?xml version="1.0"?>
<launch>
    <!-- The planning and execution components of MoveIt! configured to run -->
    <!-- using the ROS-Industrial interface. -->

    <!-- | 		PARAMETERS  		| -->
    <!-- the "sim" argument controls whether we connect to a Simulated or Real robot. -->
    <arg name="sim" default="false" doc="If true, the robot will be simulated in Gazebo" />
    <!-- hardware_interface to use : PositionJointInterface, EffortJointInterface, VelocityJointInterface. -->
    <arg name="hardware_interface" default="PositionJointInterface"/>
    <!-- The is gonna have its nodes/topics under a namespace with the same name. -->
    <arg name="robot_name" default="iiwa"/>
    <!-- Model of the iiwa to use : iiwa7, iiwa14 -->
    <arg name="model" default="iiwa7"/>
    <arg name="rviz" default="true" />

    <remap from="/$(arg hardware_interface)_trajectory_controller/follow_joint_trajectory"
           to="/$(arg robot_name)/$(arg hardware_interface)_trajectory_controller/follow_joint_trajectory" />
    <!--remap from="robot_description" to="/$(arg robot_name)/robot_description" /-->
    <remap from="/get_planning_scene" to="/$(arg robot_name)/get_planning_scene" />

    <remap from="ft_calib/ft_raw" to="/iiwa/state/CartesianWrench"/>
    <remap from="ft_calib/imu" to="/imu" />

    <!-- The IMU node -->
    <node name="imu" pkg="lpms_imu" type="lpms_imu_node" respawn="false" output="screen">
        <param name="sensor_model" type="string" value="DEVICE_LPMS_B2" />
        <param name="port" type="string" value="00:04:3E:9B:A3:97" />
    </node>



    <!-- Run the robot within a Gazebo simulation. -->
    <group if="$(arg sim)">

        <!-- Load Gazebo with given values -->
        <include file="$(find iiwa_gazebo)/launch/iiwa_gazebo.launch">
            <arg name="hardware_interface" value="$(arg hardware_interface)"/>
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="model" value="$(arg model)"/>
        </include>
    </group>

    <!-- Working with the real robot.  -->
    <group ns="$(arg robot_name)" unless="$(arg sim)">

        <!-- Load controllers accordingly to parameters -->
        <include file="$(find iiwa_control)/launch/iiwa_control.launch">
            <arg name="hardware_interface" value="$(arg hardware_interface)" />
            <arg name="controllers" value="joint_state_controller $(arg hardware_interface)_trajectory_controller" />
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="model" value="$(arg model)" />
        </include>

        <!-- Robot interface -->
        <include file="$(find iiwa_hw)/launch/iiwa_hw.launch" >
            <arg name="hardware_interface" value="$(arg hardware_interface)" />
        </include>

    </group>

    <!-- Load move_group backup>>ns="$(arg robot_name)" -->
    <group ns="$(arg robot_name)">
        <include file="$(find iiwa_moveit)/launch/move_group.launch">
            <arg name="publish_monitored_planning_scene" value="true" />
            <arg name="hardware_interface" value="$(arg hardware_interface)"/>
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="model" value="$(arg model)" />
        </include>

        <include if="$(arg rviz)" file="$(find iiwa_moveit)/launch/moveit_rviz.launch">
            <arg name="config" value="true"/>
        </include>
        <!-- The force/torque sensor calibration node -->
        <node name="ft_calib" pkg="force_torque_sensor_calib" type="ft_calib_node" respawn="false" output="screen" >
          <rosparam command="load" file="$(find force_torque_sensor_calib)/config/example_ft_calib_params.yaml"/>
        </node>

    </group>

    <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster2" args="0 0 0 0 0 0 1 /iiwa_link_ee /'Flange of LBR_iiwa_7_R800_1' 100" />
    <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster4" args="0 0 0 -0.5 -0.5 0.500001 -0.499999 /iiwa_link_ee /imu 100" />

    <!-- The node of calculating the transformation between the world frame of the robot and the world frame of IMU -->
    <!--node name="tf_world_robot_imu" pkg="iiwa_control_pos" type="tf_link_ee_imu_node" respawn="false" output="screen">
    </node-->

</launch>
